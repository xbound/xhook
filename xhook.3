.TH xhook 3 2024-1-5 "Linux man-pages"
.SH NAME
xhook_curse, xhook_curse_r, xhook_uncurse, xhook_uncurse_r, xhook_seal, xhook_seal_r, xhook_unseal, xhook_unseal_r, xhook_getlevel, xhook_getlevel_r, xhook_wipe, xhook_wipe_r, xhook_init_r \- curse or uncurse a function
.SH LIBRARY
xhook library
.SH SYNOPSIS
.nf
.B #include\ "xhook.h" or #include <xhook.h>
.PP
.BI "int xhook_curse(void *" target ",const void *" callback ",long " level );
.BI "int xhook_uncurse(void *" target ",const void *_Nullable " callback ",long " level );
.BI "int xhook_seal(void *" target );
.BI "int xhook_unseal(void *" target );
.BI "long xhook_getlevel(void);
.BI "int xhook_wipe(void);
.PP
.BI "int xhook_curse_r(xhook_t *restrict " xhp ,
.BI "			void *" target ",const void *" callback ",long " level );
.PP
.BI "int xhook_uncurse_r(xhook_t *restrict " xhp ,
.BI "			void *" target ",const void *_Nullable " callback ",long " level );
.BI "int xhook_seal_r(xhook_t *restrict " xhp ",void *" target );
.BI "int xhook_unseal_r(xhook_t *restrict " xhp ",void *" target );
.BI "long xhook_getlevel_r(xhook_t *restrict " xhp );
.BI "int xhook_wipe_r(xhook_t *restrict " xhp );
.BI "void xhook_init_r(xhook_t *restrict " xhp );
.fi
.SH DESCRIPTION
.SS xhook_curse()
The
.BR xhook_curse()
.RI "curses\ a\ function with address " target .
When the cursed function is called,it will be redirect to the
.I callback
function.
.PP
A
.I target
can be cursed many times with same or different
.IR "callback" \ and\  "level" ,which\ generate\ a\ hook\ with\ a\ sequence\ every\ time.
When it is called,it will be redirect to the
.I callback
in the hook with the greatest sequence.
In same
.I level
the later hook has a greater sequence than the earlier.
The sequence of a hook is greater than that of all hooks with a less
.IR "level" .
.PP
.I level
must be in the range [LONG_MIN+1,LONG_MAX].
.PP
.SS xhook_uncurse()
The
.BR xhook_uncurse()
.RI "uncurses\ the\ cursed function " target .
.PP
let A and B be two sets of hooks.
.PP
.RI If\  "callback" "==NULL,A is all hooks of " target .
Otherwise,A is all hooks of
.IR target " with the callback function."
.PP
.RI If\  "level" "==LONG_MIN,B is all hooks of " target .
Otherwise,B is all hooks of
.IR target " with the level."
.PP
The top (with the greatest sequence) hook in the intersection of A and B will be released.
.PP
the level of the latest released hook can get with
.BR xhook_getlevel()
.SS xhook_seal()
The
.BR xhook_seal()
seals all curses of
.IR target \.
Then,the function
.I target
behaves as not cursed state.
.BR xhook_curse()
and
.BR xhook_uncurse()
are still available but the behavior of
.I target
will not be modified until a
.BR xhook_unseal()
is called.
.SS xhook_unseal()
The
.BR xhook_unseal()
unseals
.IR target \.
.SS xhook_getlevel()
The
.BR xhook_getlevel()
returns the level of the latest released hook.
.PP
This function must be called after a successful 
.BR xhook_uncurse()
,or its behavior is undefined.
.SS xhook_wipe()
The
.BR xhook_wipe()
uncurses all functions completely and frees the resource used for
.BR xhook_curse()
and
.BR xhook_uncurse()
.SS xhook_init_r()
The
.BR xhook_init_r()
inits a
.BR xhook_t
(aka 
.BR "struct xhook_struct" )
variable,this function must be called before using a new xhook_t variable,unless it is initialized with XHOOK_INITED.
.SH RETURN VALUE
.BR xhook_curse()
may return 0, -2, -4
.PP
.BR xhook_uncurse()
may return 0, -1, -3, -4
.PP
.BR xhook_wipe()
may return 0, -3
.PP
.BR xhook_seal()
may return 0, -2, -4, -5
.PP
.BR xhook_unseal()
may return 0, -4, -5
.PP
0	successful
.PP
-1	target is not cursed
.PP
-2	cannot not open /proc/self/mem
.PP
-3	no function is cursed
.PP
-4	level==LONG_MIN or target==NULL
.PP
-5	target is sealed for
.BR xhook_seal()
or not for
.BR xhook_unseal()
.SH EXAMPLE
.SS Source
.EX
#include <stdio.h>
#include <stdlib.h>
#include "xhook.h"
void foo(int n){
	printf("foo:output %d\\n",n);
}
void add50(int n){
	long lv;
	xhook_uncurse(foo,add50,LONG_MIN);
	lv=xhook_getlevel();
	foo(n+50);
	xhook_curse(foo,add50,lv);
}
void mul2(int n){
	long lv;
	xhook_uncurse(foo,mul2,LONG_MIN);
	lv=xhook_getlevel();
	foo(n*2);
	xhook_curse(foo,mul2,lv);
}
void deny(int n){
	puts("deny:foo is denied");
}
int main(void){
	foo(5);
	puts("Note:60=(5*2)+50 110=(5+50)*2\\n");
	xhook_curse(foo,deny,0);
	puts("main:foo to deny (level 0)");
	foo(5);
	xhook_uncurse(foo,deny,0);
	puts("main:foo is uncursed\\n");
	foo(5);
	xhook_curse(foo,add50,0);
	puts("main:foo to add50 (level 0)");
	foo(5);
	xhook_curse(foo,mul2,0);
	puts("main:foo to mul2 (level 0)");
	foo(5);
	xhook_wipe();
	puts("main:foo is uncursed\\n");
	foo(5);
	xhook_curse(foo,mul2,0);
	puts("main:foo to mul2 (level 0)");
	foo(5);
	xhook_curse(foo,add50,0);
	puts("main:foo to add50 (level 0)");
	foo(5);
	xhook_wipe();
	puts("main:foo is uncursed\\n");
	foo(5);
	xhook_curse(foo,mul2,1);
	puts("main:foo to mul2 (level 1)");
	foo(5);
	xhook_curse(foo,add50,0);
	puts("main:foo to add50 (level 0)");
	foo(5);
	xhook_wipe();
	puts("main:foo is uncursed\\n");
	return EXIT_SUCCESS;
}
.EE
.SS Output
.EX
foo:output 5
Note:60=(5*2)+50 110=(5+50)*2

main:foo to deny (level 0)
deny:foo is denied
main:foo is uncursed

foo:output 5
main:foo to add50 (level 0)
foo:output 55
main:foo to mul2 (level 0)
foo:output 60
main:foo is uncursed

foo:output 5
main:foo to mul2 (level 0)
foo:output 10
main:foo to add50 (level 0)
foo:output 110
main:foo is uncursed

foo:output 5
main:foo to mul2 (level 1)
foo:output 10
main:foo to add50 (level 0)
foo:output 60
main:foo is uncursed
.EE
.SH SEE ALSO
.ad l
.nh
